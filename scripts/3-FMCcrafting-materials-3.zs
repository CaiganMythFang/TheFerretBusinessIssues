import minetweaker.item.IItemStack;

// Variables

val crate1fmc = <ferretshinies:LayeredIconAsset:393>;
val crate2fmc = <ferretshinies:LayeredIconAsset:394>;
val crate5fmc = <ferretshinies:LayeredIconAsset:395>;
val crate25fmc = <ferretshinies:LayeredIconAsset:396>;
val crate200fmc = <ferretshinies:LayeredIconAsset:397>;
val crate300fmc = <ferretshinies:LayeredIconAsset:398>;
val crate400fmc = <ferretshinies:LayeredIconAsset:399>;

val emptycrate = <ferretshinies:IconAsset:67>;
val crate10fmc = <ferretshinies:LayeredIconAsset:1>;
val crate50fmc = <ferretshinies:LayeredIconAsset:2>;
val crate100fmc = <ferretshinies:LayeredIconAsset:3>;
val crate500fmc = <ferretshinies:LayeredIconAsset:4>;
val crate1k = <ferretshinies:LayeredIconAsset:5>;
val crate2k = <ferretshinies:LayeredIconAsset:6>;
val crate3k = <ferretshinies:LayeredIconAsset:7>;
val crate4k = <ferretshinies:LayeredIconAsset:8>;
val crate5k = <ferretshinies:LayeredIconAsset:9>;
val crate6k = <ferretshinies:LayeredIconAsset:10>;
val crate7k = <ferretshinies:LayeredIconAsset:11>;
val crate8k = <ferretshinies:LayeredIconAsset:12>;
val crate9k = <ferretshinies:LayeredIconAsset:13>;
val crate10k = <ferretshinies:LayeredIconAsset:14>;
val crate20k = <ferretshinies:LayeredIconAsset:15>;
val crate30k = <ferretshinies:LayeredIconAsset:16>;
val crate40k = <ferretshinies:LayeredIconAsset:17>;
val crate50k = <ferretshinies:LayeredIconAsset:18>;
val crate100k = <ferretshinies:LayeredIconAsset:355>;

val FMC301000 = <ore:zFMC301000>;
val FMC302000 = <ore:zFMC302000>;
val FMC303000 = <ore:zFMC303000>;
val FMC304000 = <ore:zFMC304000>;
val FMC305000 = <ore:zFMC305000>;
val FMC306000 = <ore:zFMC306000>;
val FMC307000 = <ore:zFMC307000>;
val FMC308000 = <ore:zFMC308000>;
val FMC309000 = <ore:zFMC309000>;
val FMC310000 = <ore:zFMC310000>;
val FMC311000 = <ore:zFMC311000>;
val FMC312000 = <ore:zFMC312000>;
val FMC313000 = <ore:zFMC313000>;
val FMC314000 = <ore:zFMC314000>;
val FMC315000 = <ore:zFMC315000>;
val FMC316000 = <ore:zFMC316000>;
val FMC317000 = <ore:zFMC317000>;
val FMC318000 = <ore:zFMC318000>;
val FMC319000 = <ore:zFMC319000>;
val FMC320000 = <ore:zFMC320000>;
val FMC321000 = <ore:zFMC321000>;
val FMC322000 = <ore:zFMC322000>;
val FMC323000 = <ore:zFMC323000>;
val FMC324000 = <ore:zFMC324000>;
val FMC325000 = <ore:zFMC325000>;
val FMC326000 = <ore:zFMC326000>;
val FMC327000 = <ore:zFMC327000>;
val FMC328000 = <ore:zFMC328000>;
val FMC329000 = <ore:zFMC329000>;
val FMC330000 = <ore:zFMC330000>;
val FMC331000 = <ore:zFMC331000>;
val FMC332000 = <ore:zFMC332000>;
val FMC333000 = <ore:zFMC333000>;
val FMC334000 = <ore:zFMC334000>;
val FMC335000 = <ore:zFMC335000>;
val FMC336000 = <ore:zFMC336000>;
val FMC337000 = <ore:zFMC337000>;
val FMC338000 = <ore:zFMC338000>;
val FMC339000 = <ore:zFMC339000>;
val FMC340000 = <ore:zFMC340000>;
val FMC341000 = <ore:zFMC341000>;
val FMC342000 = <ore:zFMC342000>;
val FMC343000 = <ore:zFMC343000>;
val FMC344000 = <ore:zFMC344000>;
val FMC345000 = <ore:zFMC345000>;
val FMC346000 = <ore:zFMC346000>;
val FMC347000 = <ore:zFMC347000>;
val FMC348000 = <ore:zFMC348000>;
val FMC349000 = <ore:zFMC349000>;
val FMC350000 = <ore:zFMC350000>;
val FMC351000 = <ore:zFMC351000>;
val FMC352000 = <ore:zFMC352000>;
val FMC353000 = <ore:zFMC353000>;
val FMC354000 = <ore:zFMC354000>;
val FMC355000 = <ore:zFMC355000>;
val FMC356000 = <ore:zFMC356000>;
val FMC357000 = <ore:zFMC357000>;
val FMC358000 = <ore:zFMC358000>;
val FMC359000 = <ore:zFMC359000>;
val FMC360000 = <ore:zFMC360000>;
val FMC361000 = <ore:zFMC361000>;
val FMC362000 = <ore:zFMC362000>;
val FMC363000 = <ore:zFMC363000>;
val FMC364000 = <ore:zFMC364000>;
val FMC365000 = <ore:zFMC365000>;
val FMC366000 = <ore:zFMC366000>;
val FMC367000 = <ore:zFMC367000>;
val FMC368000 = <ore:zFMC368000>;
val FMC369000 = <ore:zFMC369000>;
val FMC370000 = <ore:zFMC370000>;
val FMC371000 = <ore:zFMC371000>;
val FMC372000 = <ore:zFMC372000>;
val FMC373000 = <ore:zFMC373000>;
val FMC374000 = <ore:zFMC374000>;
val FMC375000 = <ore:zFMC375000>;
val FMC376000 = <ore:zFMC376000>;
val FMC377000 = <ore:zFMC377000>;
val FMC378000 = <ore:zFMC378000>;
val FMC379000 = <ore:zFMC379000>;
val FMC380000 = <ore:zFMC380000>;
val FMC381000 = <ore:zFMC381000>;
val FMC382000 = <ore:zFMC382000>;
val FMC383000 = <ore:zFMC383000>;
val FMC384000 = <ore:zFMC384000>;
val FMC385000 = <ore:zFMC385000>;
val FMC386000 = <ore:zFMC386000>;
val FMC387000 = <ore:zFMC387000>;
val FMC388000 = <ore:zFMC388000>;
val FMC389000 = <ore:zFMC389000>;
val FMC390000 = <ore:zFMC390000>;
val FMC391000 = <ore:zFMC391000>;
val FMC392000 = <ore:zFMC392000>;
val FMC393000 = <ore:zFMC393000>;
val FMC394000 = <ore:zFMC394000>;
val FMC395000 = <ore:zFMC395000>;
val FMC396000 = <ore:zFMC396000>;
val FMC397000 = <ore:zFMC397000>;
val FMC398000 = <ore:zFMC398000>;
val FMC399000 = <ore:zFMC399000>;
val FMC400000 = <ore:zFMC400000>;
val FMC401000 = <ore:zFMC401000>;
val FMC402000 = <ore:zFMC402000>;
val FMC403000 = <ore:zFMC403000>;
val FMC404000 = <ore:zFMC404000>;
val FMC405000 = <ore:zFMC405000>;
val FMC406000 = <ore:zFMC406000>;
val FMC407000 = <ore:zFMC407000>;
val FMC408000 = <ore:zFMC408000>;
val FMC409000 = <ore:zFMC409000>;
val FMC410000 = <ore:zFMC410000>;
val FMC411000 = <ore:zFMC411000>;
val FMC412000 = <ore:zFMC412000>;
val FMC413000 = <ore:zFMC413000>;
val FMC414000 = <ore:zFMC414000>;
val FMC415000 = <ore:zFMC415000>;
val FMC416000 = <ore:zFMC416000>;
val FMC417000 = <ore:zFMC417000>;
val FMC418000 = <ore:zFMC418000>;
val FMC419000 = <ore:zFMC419000>;
val FMC420000 = <ore:zFMC420000>;
val FMC421000 = <ore:zFMC421000>;
val FMC422000 = <ore:zFMC422000>;
val FMC423000 = <ore:zFMC423000>;
val FMC424000 = <ore:zFMC424000>;
val FMC425000 = <ore:zFMC425000>;
val FMC426000 = <ore:zFMC426000>;
val FMC427000 = <ore:zFMC427000>;
val FMC428000 = <ore:zFMC428000>;
val FMC429000 = <ore:zFMC429000>;
val FMC430000 = <ore:zFMC430000>;
val FMC431000 = <ore:zFMC431000>;
val FMC432000 = <ore:zFMC432000>;
val FMC433000 = <ore:zFMC433000>;
val FMC434000 = <ore:zFMC434000>;
val FMC435000 = <ore:zFMC435000>;
val FMC436000 = <ore:zFMC436000>;
val FMC437000 = <ore:zFMC437000>;
val FMC438000 = <ore:zFMC438000>;
val FMC439000 = <ore:zFMC439000>;
val FMC440000 = <ore:zFMC440000>;
val FMC441000 = <ore:zFMC441000>;
val FMC442000 = <ore:zFMC442000>;
val FMC443000 = <ore:zFMC443000>;
val FMC444000 = <ore:zFMC444000>;
val FMC445000 = <ore:zFMC445000>;
val FMC446000 = <ore:zFMC446000>;
val FMC447000 = <ore:zFMC447000>;
val FMC448000 = <ore:zFMC448000>;
val FMC449000 = <ore:zFMC449000>;
val FMC450000 = <ore:zFMC450000>;
val FMC451000 = <ore:zFMC451000>;
val FMC452000 = <ore:zFMC452000>;
val FMC453000 = <ore:zFMC453000>;
val FMC454000 = <ore:zFMC454000>;
val FMC455000 = <ore:zFMC455000>;
val FMC456000 = <ore:zFMC456000>;
val FMC457000 = <ore:zFMC457000>;
val FMC458000 = <ore:zFMC458000>;
val FMC459000 = <ore:zFMC459000>;
val FMC460000 = <ore:zFMC460000>;
val FMC461000 = <ore:zFMC461000>;
val FMC462000 = <ore:zFMC462000>;
val FMC463000 = <ore:zFMC463000>;
val FMC464000 = <ore:zFMC464000>;
val FMC465000 = <ore:zFMC465000>;
val FMC466000 = <ore:zFMC466000>;
val FMC467000 = <ore:zFMC467000>;
val FMC468000 = <ore:zFMC468000>;
val FMC469000 = <ore:zFMC469000>;
val FMC470000 = <ore:zFMC470000>;
val FMC471000 = <ore:zFMC471000>;
val FMC472000 = <ore:zFMC472000>;
val FMC473000 = <ore:zFMC473000>;
val FMC474000 = <ore:zFMC474000>;
val FMC475000 = <ore:zFMC475000>;
val FMC476000 = <ore:zFMC476000>;
val FMC477000 = <ore:zFMC477000>;
val FMC478000 = <ore:zFMC478000>;
val FMC479000 = <ore:zFMC479000>;
val FMC480000 = <ore:zFMC480000>;
val FMC481000 = <ore:zFMC481000>;
val FMC482000 = <ore:zFMC482000>;
val FMC483000 = <ore:zFMC483000>;
val FMC484000 = <ore:zFMC484000>;
val FMC485000 = <ore:zFMC485000>;
val FMC486000 = <ore:zFMC486000>;
val FMC487000 = <ore:zFMC487000>;
val FMC488000 = <ore:zFMC488000>;
val FMC489000 = <ore:zFMC489000>;
val FMC490000 = <ore:zFMC490000>;
val FMC491000 = <ore:zFMC491000>;
val FMC492000 = <ore:zFMC492000>;
val FMC493000 = <ore:zFMC493000>;
val FMC494000 = <ore:zFMC494000>;
val FMC495000 = <ore:zFMC495000>;
val FMC496000 = <ore:zFMC496000>;
val FMC497000 = <ore:zFMC497000>;
val FMC498000 = <ore:zFMC498000>;
val FMC499000 = <ore:zFMC499000>;
val FMC500000 = <ore:zFMC500000>;
val FMC501000 = <ore:zFMC501000>;
val FMC502000 = <ore:zFMC502000>;
val FMC503000 = <ore:zFMC503000>;
val FMC504000 = <ore:zFMC504000>;
val FMC505000 = <ore:zFMC505000>;
val FMC506000 = <ore:zFMC506000>;
val FMC507000 = <ore:zFMC507000>;
val FMC508000 = <ore:zFMC508000>;
val FMC509000 = <ore:zFMC509000>;
val FMC510000 = <ore:zFMC510000>;
val FMC511000 = <ore:zFMC511000>;
val FMC512000 = <ore:zFMC512000>;
val FMC513000 = <ore:zFMC513000>;
val FMC514000 = <ore:zFMC514000>;
val FMC515000 = <ore:zFMC515000>;
val FMC516000 = <ore:zFMC516000>;
val FMC517000 = <ore:zFMC517000>;
val FMC518000 = <ore:zFMC518000>;
val FMC519000 = <ore:zFMC519000>;
val FMC520000 = <ore:zFMC520000>;
val FMC521000 = <ore:zFMC521000>;
val FMC522000 = <ore:zFMC522000>;
val FMC523000 = <ore:zFMC523000>;
val FMC524000 = <ore:zFMC524000>;
val FMC525000 = <ore:zFMC525000>;
val FMC526000 = <ore:zFMC526000>;
val FMC527000 = <ore:zFMC527000>;
val FMC528000 = <ore:zFMC528000>;
val FMC529000 = <ore:zFMC529000>;
val FMC530000 = <ore:zFMC530000>;
val FMC531000 = <ore:zFMC531000>;
val FMC532000 = <ore:zFMC532000>;
val FMC533000 = <ore:zFMC533000>;
val FMC534000 = <ore:zFMC534000>;
val FMC535000 = <ore:zFMC535000>;
val FMC536000 = <ore:zFMC536000>;
val FMC537000 = <ore:zFMC537000>;
val FMC538000 = <ore:zFMC538000>;
val FMC539000 = <ore:zFMC539000>;
val FMC540000 = <ore:zFMC540000>;
val FMC541000 = <ore:zFMC541000>;
val FMC542000 = <ore:zFMC542000>;
val FMC543000 = <ore:zFMC543000>;
val FMC544000 = <ore:zFMC544000>;
val FMC545000 = <ore:zFMC545000>;
val FMC546000 = <ore:zFMC546000>;
val FMC547000 = <ore:zFMC547000>;
val FMC548000 = <ore:zFMC548000>;
val FMC549000 = <ore:zFMC549000>;
val FMC550000 = <ore:zFMC550000>;
val FMC551000 = <ore:zFMC551000>;
val FMC552000 = <ore:zFMC552000>;
val FMC553000 = <ore:zFMC553000>;
val FMC554000 = <ore:zFMC554000>;
val FMC555000 = <ore:zFMC555000>;
val FMC556000 = <ore:zFMC556000>;
val FMC557000 = <ore:zFMC557000>;
val FMC558000 = <ore:zFMC558000>;
val FMC559000 = <ore:zFMC559000>;
val FMC560000 = <ore:zFMC560000>;
val FMC561000 = <ore:zFMC561000>;
val FMC562000 = <ore:zFMC562000>;
val FMC563000 = <ore:zFMC563000>;
val FMC564000 = <ore:zFMC564000>;
val FMC565000 = <ore:zFMC565000>;
val FMC566000 = <ore:zFMC566000>;
val FMC567000 = <ore:zFMC567000>;
val FMC568000 = <ore:zFMC568000>;
val FMC569000 = <ore:zFMC569000>;
val FMC570000 = <ore:zFMC570000>;
val FMC571000 = <ore:zFMC571000>;
val FMC572000 = <ore:zFMC572000>;
val FMC573000 = <ore:zFMC573000>;
val FMC574000 = <ore:zFMC574000>;
val FMC575000 = <ore:zFMC575000>;
val FMC576000 = <ore:zFMC576000>;
val FMC577000 = <ore:zFMC577000>;
val FMC578000 = <ore:zFMC578000>;
val FMC579000 = <ore:zFMC579000>;
val FMC580000 = <ore:zFMC580000>;
val FMC581000 = <ore:zFMC581000>;
val FMC582000 = <ore:zFMC582000>;
val FMC583000 = <ore:zFMC583000>;
val FMC584000 = <ore:zFMC584000>;
val FMC585000 = <ore:zFMC585000>;
val FMC586000 = <ore:zFMC586000>;
val FMC587000 = <ore:zFMC587000>;
val FMC588000 = <ore:zFMC588000>;
val FMC589000 = <ore:zFMC589000>;
val FMC590000 = <ore:zFMC590000>;
val FMC591000 = <ore:zFMC591000>;
val FMC592000 = <ore:zFMC592000>;
val FMC593000 = <ore:zFMC593000>;
val FMC594000 = <ore:zFMC594000>;
val FMC595000 = <ore:zFMC595000>;
val FMC596000 = <ore:zFMC596000>;
val FMC597000 = <ore:zFMC597000>;
val FMC598000 = <ore:zFMC598000>;
val FMC599000 = <ore:zFMC599000>;
val FMC600000 = <ore:zFMC600000>;
val FMC601000 = <ore:zFMC601000>;
val FMC602000 = <ore:zFMC602000>;
val FMC603000 = <ore:zFMC603000>;
val FMC604000 = <ore:zFMC604000>;
val FMC605000 = <ore:zFMC605000>;
val FMC606000 = <ore:zFMC606000>;
val FMC607000 = <ore:zFMC607000>;
val FMC608000 = <ore:zFMC608000>;
val FMC609000 = <ore:zFMC609000>;
val FMC610000 = <ore:zFMC610000>;
val FMC611000 = <ore:zFMC611000>;
val FMC612000 = <ore:zFMC612000>;
val FMC613000 = <ore:zFMC613000>;
val FMC614000 = <ore:zFMC614000>;
val FMC615000 = <ore:zFMC615000>;
val FMC616000 = <ore:zFMC616000>;
val FMC617000 = <ore:zFMC617000>;
val FMC618000 = <ore:zFMC618000>;
val FMC619000 = <ore:zFMC619000>;
val FMC620000 = <ore:zFMC620000>;
val FMC621000 = <ore:zFMC621000>;
val FMC622000 = <ore:zFMC622000>;
val FMC623000 = <ore:zFMC623000>;
val FMC624000 = <ore:zFMC624000>;
val FMC625000 = <ore:zFMC625000>;
val FMC626000 = <ore:zFMC626000>;
val FMC627000 = <ore:zFMC627000>;
val FMC628000 = <ore:zFMC628000>;
val FMC629000 = <ore:zFMC629000>;
val FMC630000 = <ore:zFMC630000>;
val FMC631000 = <ore:zFMC631000>;
val FMC632000 = <ore:zFMC632000>;
val FMC633000 = <ore:zFMC633000>;
val FMC634000 = <ore:zFMC634000>;
val FMC635000 = <ore:zFMC635000>;
val FMC636000 = <ore:zFMC636000>;
val FMC637000 = <ore:zFMC637000>;
val FMC638000 = <ore:zFMC638000>;
val FMC639000 = <ore:zFMC639000>;
val FMC640000 = <ore:zFMC640000>;
val FMC641000 = <ore:zFMC641000>;
val FMC642000 = <ore:zFMC642000>;
val FMC643000 = <ore:zFMC643000>;
val FMC644000 = <ore:zFMC644000>;
val FMC645000 = <ore:zFMC645000>;
val FMC646000 = <ore:zFMC646000>;
val FMC647000 = <ore:zFMC647000>;
val FMC648000 = <ore:zFMC648000>;
val FMC649000 = <ore:zFMC649000>;
val FMC650000 = <ore:zFMC650000>;
val FMC651000 = <ore:zFMC651000>;
val FMC652000 = <ore:zFMC652000>;
val FMC653000 = <ore:zFMC653000>;
val FMC654000 = <ore:zFMC654000>;
val FMC655000 = <ore:zFMC655000>;
val FMC656000 = <ore:zFMC656000>;
val FMC657000 = <ore:zFMC657000>;
val FMC658000 = <ore:zFMC658000>;
val FMC659000 = <ore:zFMC659000>;
val FMC660000 = <ore:zFMC660000>;
val FMC661000 = <ore:zFMC661000>;
val FMC662000 = <ore:zFMC662000>;
val FMC663000 = <ore:zFMC663000>;
val FMC664000 = <ore:zFMC664000>;
val FMC665000 = <ore:zFMC665000>;
val FMC666000 = <ore:zFMC666000>;
val FMC667000 = <ore:zFMC667000>;
val FMC668000 = <ore:zFMC668000>;
val FMC669000 = <ore:zFMC669000>;
val FMC670000 = <ore:zFMC670000>;
val FMC671000 = <ore:zFMC671000>;
val FMC672000 = <ore:zFMC672000>;
val FMC673000 = <ore:zFMC673000>;
val FMC674000 = <ore:zFMC674000>;
val FMC675000 = <ore:zFMC675000>;
val FMC676000 = <ore:zFMC676000>;
val FMC677000 = <ore:zFMC677000>;
val FMC678000 = <ore:zFMC678000>;
val FMC679000 = <ore:zFMC679000>;
val FMC680000 = <ore:zFMC680000>;
val FMC681000 = <ore:zFMC681000>;
val FMC682000 = <ore:zFMC682000>;
val FMC683000 = <ore:zFMC683000>;
val FMC684000 = <ore:zFMC684000>;
val FMC685000 = <ore:zFMC685000>;
val FMC686000 = <ore:zFMC686000>;
val FMC687000 = <ore:zFMC687000>;
val FMC688000 = <ore:zFMC688000>;
val FMC689000 = <ore:zFMC689000>;
val FMC690000 = <ore:zFMC690000>;
val FMC691000 = <ore:zFMC691000>;
val FMC692000 = <ore:zFMC692000>;
val FMC693000 = <ore:zFMC693000>;
val FMC694000 = <ore:zFMC694000>;
val FMC695000 = <ore:zFMC695000>;
val FMC696000 = <ore:zFMC696000>;
val FMC697000 = <ore:zFMC697000>;
val FMC698000 = <ore:zFMC698000>;
val FMC699000 = <ore:zFMC699000>;
val FMC700000 = <ore:zFMC700000>;

// --------------------------
// 301,000 to 320,000
// --------------------------
recipes.addShapeless(crate100k * 3, [emptycrate, FMC301000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC302000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC303000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC304000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC305000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC306000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC307000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC308000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC309000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC310000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC311000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC312000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC313000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC314000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC315000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC316000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC317000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC318000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC319000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 3, [emptycrate, FMC320000.transformReplace(crate1k * 20)]);

// --------------------------
// 321,000 to 340,000
// --------------------------
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC321000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC322000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC323000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC324000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC325000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC326000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC327000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC328000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC329000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC330000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC331000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC332000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC333000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC334000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC335000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC336000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC337000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC338000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC339000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 2), FMC340000.transformReplace(crate1k * 20)]);

// --------------------------
// 341,000 to 360,000
// --------------------------
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC341000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC342000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC343000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC344000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC345000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC346000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC347000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC348000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC349000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC350000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC351000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC352000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC353000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC354000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC355000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC356000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC357000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC358000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC359000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 4), FMC360000.transformReplace(crate1k * 20)]);

// --------------------------
// 361,000 to 380,000
// --------------------------
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC361000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC362000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC363000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC364000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC365000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC366000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC367000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC368000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC369000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC370000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC371000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC372000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC373000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC374000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC375000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC376000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC377000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC378000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC379000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 6), FMC380000.transformReplace(crate1k * 20)]);

// --------------------------
// 381,000 to 400,000
// --------------------------
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC381000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC382000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC383000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC384000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC385000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC386000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC387000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC388000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC389000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC390000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC391000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC392000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC393000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC394000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC395000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC396000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC397000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC398000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC399000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 3, [emptycrate.transformReplace(crate10k * 8), FMC400000.transformReplace(crate1k * 20)]);

// --------------------------
// 401,000 to 420,000
// --------------------------
recipes.addShapeless(crate100k * 4, [emptycrate, FMC401000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC402000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC403000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC404000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC405000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC406000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC407000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC408000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC409000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC410000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC411000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC412000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC413000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC414000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC415000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC416000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC417000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC418000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC419000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 4, [emptycrate, FMC420000.transformReplace(crate1k * 20)]);

// --------------------------
// 421,000 to 440,000
// --------------------------
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC421000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC422000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC423000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC424000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC425000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC426000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC427000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC428000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC429000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC430000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC431000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC432000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC433000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC434000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC435000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC436000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC437000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC438000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC439000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 2), FMC440000.transformReplace(crate1k * 20)]);

// --------------------------
// 441,000 to 460,000
// --------------------------
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC441000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC442000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC443000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC444000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC445000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC446000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC447000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC448000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC449000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC450000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC451000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC452000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC453000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC454000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC455000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC456000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC457000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC458000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC459000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 4), FMC460000.transformReplace(crate1k * 20)]);

// --------------------------
// 461,000 to 480,000
// --------------------------
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC461000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC462000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC463000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC464000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC465000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC466000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC467000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC468000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC469000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC470000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC471000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC472000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC473000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC474000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC475000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC476000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC477000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC478000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC479000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 6), FMC480000.transformReplace(crate1k * 20)]);

// --------------------------
// 481,000 to 500,000
// --------------------------
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC481000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC482000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC483000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC484000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC485000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC486000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC487000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC488000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC489000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC490000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC491000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC492000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC493000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC494000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC495000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC496000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC497000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC498000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC499000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 4, [emptycrate.transformReplace(crate10k * 8), FMC500000.transformReplace(crate1k * 20)]);

// --------------------------
// 501,000 to 520,000
// --------------------------
recipes.addShapeless(crate100k * 5, [emptycrate, FMC501000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC502000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC503000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC504000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC505000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC506000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC507000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC508000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC509000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC510000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC511000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC512000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC513000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC514000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC515000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC516000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC517000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC518000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC519000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 5, [emptycrate, FMC520000.transformReplace(crate1k * 20)]);

// --------------------------
// 521,000 to 540,000
// --------------------------
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC521000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC522000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC523000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC524000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC525000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC526000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC527000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC528000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC529000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC530000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC531000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC532000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC533000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC534000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC535000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC536000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC537000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC538000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC539000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 2), FMC540000.transformReplace(crate1k * 20)]);

// --------------------------
// 541,000 to 560,000
// --------------------------
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC541000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC542000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC543000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC544000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC545000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC546000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC547000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC548000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC549000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC550000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC551000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC552000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC553000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC554000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC555000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC556000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC557000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC558000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC559000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 4), FMC560000.transformReplace(crate1k * 20)]);

// --------------------------
// 561,000 to 580,000
// --------------------------
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC561000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC562000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC563000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC564000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC565000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC566000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC567000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC568000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC569000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC570000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC571000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC572000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC573000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC574000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC575000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC576000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC577000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC578000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC579000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 6), FMC580000.transformReplace(crate1k * 20)]);

// --------------------------
// 581,000 to 600,000
// --------------------------
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC581000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC582000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC583000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC584000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC585000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC586000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC587000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC588000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC589000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC590000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC591000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC592000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC593000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC594000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC595000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC596000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC597000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC598000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC599000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 5, [emptycrate.transformReplace(crate10k * 8), FMC600000.transformReplace(crate1k * 20)]);

// --------------------------
// 681,000 to 700,000
// --------------------------
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC681000.transformReplace(crate1k * 1)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC682000.transformReplace(crate1k * 2)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC683000.transformReplace(crate1k * 3)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC684000.transformReplace(crate1k * 4)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC685000.transformReplace(crate1k * 5)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC686000.transformReplace(crate1k * 6)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC687000.transformReplace(crate1k * 7)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC688000.transformReplace(crate1k * 8)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC689000.transformReplace(crate1k * 9)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC690000.transformReplace(crate1k * 10)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC691000.transformReplace(crate1k * 11)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC692000.transformReplace(crate1k * 12)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC693000.transformReplace(crate1k * 13)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC694000.transformReplace(crate1k * 14)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC695000.transformReplace(crate1k * 15)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC696000.transformReplace(crate1k * 16)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC697000.transformReplace(crate1k * 17)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC698000.transformReplace(crate1k * 18)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC699000.transformReplace(crate1k * 19)]);
recipes.addShapeless(crate100k * 6, [emptycrate.transformReplace(crate10k * 8), FMC700000.transformReplace(crate1k * 20)]);